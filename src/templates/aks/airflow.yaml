prompts:
  - name: dagRepoUrl
    default: "https://github.com/polyseam/demo-dag-bag"
    message: "Please enter the url of the git repo containing your dags:"
    type: Input
  - message: "Please enter the username airflow should use to access your dag repo:"
    name: gitSyncUsername
    type: Input
  - message: "Please enter the password airflow should use to access your dag repo:"
    name: gitSyncPassword
    type: Secret
  - name: argocdDomainName
    default: argocd.example.com
    message: "Please enter the domain name you want argocd to be accessible on:"
    type: Input
  - name: airflowDomainName
    default: airflow.example.com
    message: "Please enter the domain name you want airflow to be accessible on:"
    type: Input
  - message: "Please enter the email address you want to use for lets encrypt:"
    default: admin@example.com
    name: letsEncryptClusterIssuerEmailAddress
    type: Input
  - message: "Please enter the username for your postgresql admin:"
    default: admin
    name: postgresqlUser
    type: Input
  - message: >-
      Please enter the postgresql password you want to use for your postgresql
      database:
    default: password
    name: postgresqlPassword
    type: Secret
  - message: "Please enter the name for the postgresql database you want to use:"
    default: airflow-pg
    name: postgresqlDb
    type: Input
outputs:
  cndi-config:
    cndi_version: v1
    infrastructure:
      terraform:
          resource:
            azurerm_virtual_network_peering:
              cndi_azurerm_virtual_network_peering_hub:
                name: peer-vnet-hub-main-global-to-${azurerm_virtual_network.cndi_azurerm_virtual_network.name}
                resource_group_name : <HUB_VNET_RESOURCE_GROUP>
                virtual_network_name : <HUB_VNET>
                remote_virtual_network_id: "/subscriptions/<SUBSCRIPTION_ID>/resourceGroups/${azurerm_resource_group.cndi_azurerm_resource_group.name}/providers/Microsoft.Network/virtualNetworks/${azurerm_virtual_network.cndi_azurerm_virtual_network.name}"
                allow_forwarded_traffic: true
                allow_gateway_transit: true
                use_remote_gateways: false
                depends_on: [azurerm_virtual_network_peering.cndi_azurerm_virtual_network_peering_hub]
              cndi_azurerm_virtual_network_peering_spoke:
                name: peer-${azurerm_virtual_network.cndi_azurerm_virtual_network.name}-to-vnet-hub-main-global
                resource_group_name : "${azurerm_resource_group.cndi_azurerm_resource_group.name}"
                virtual_network_name : "${azurerm_virtual_network.cndi_azurerm_virtual_network.name}"
                remote_virtual_network_id: "/subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<HUB_VNET_RESOURCE_GROUP>/providers/Microsoft.Network/virtualNetworks/<HUB_VNET>"
                allow_forwarded_traffic: true
                allow_gateway_transit: false
                use_remote_gateways: true
      cndi:
        cert_manager:
          email: "{{ $.cndi.prompts.responses.letsEncryptClusterIssuerEmailAddress }}"
        open_ports:
          - number: 443
            name: https
            disable: true
          - number: 80
            name: http
            disable: true             
        nodes:
          - name: airflow-nodes
            kind: aks
            instance_type: Standard_D2s_v3
            volume_size: 128
            agents_min_count: 1
            agents_max_count: 1
    cluster_manifests:
      git-credentials-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: airflow-git-credentials
          namespace: airflow
        stringData:
          GIT_SYNC_USERNAME: $.cndi.secrets.seal(GIT_SYNC_USERNAME)
          GIT_SYNC_PASSWORD: $.cndi.secrets.seal(GIT_SYNC_PASSWORD)
      postgresql-connection-string-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: postgresql-connection-string-secret
          namespace: airflow
        type: Opaque
        stringData:
          connection: $.cndi.secrets.seal(POSTGRESQL_CONNECTION_STRING)
      cnpg-cluster:
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: cnpg-airflow-cluster
          namespace: airflow
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          imageName: "ghcr.io/cloudnative-pg/postgresql:15.2"
          instances: 1
          storage:
            size: 10Gi
          replicationSlots:
            highAvailability:
              enabled: true
          postgresql:
            pg_hba:
              - >-
                host {{ $.cndi.prompts.responses.postgresqlDb }} {{
                $.cndi.prompts.responses.postgresqlUser }} all password
          bootstrap:
            initdb:
              database: "{{ $.cndi.prompts.responses.postgresqlDb }}"
              owner: "{{ $.cndi.prompts.responses.postgresqlUser }}"
              secret:
                name: cnpg-database-user-auth-secret
          superuserSecret:
            name: cnpg-cluster-superuser-auth-secret
      cnpg-cluster-superuser-auth-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: cnpg-cluster-superuser-auth-secret
          namespace: airflow
        type: kubernetes.io/basic-auth
        stringData:
          username: $.cndi.secrets.seal(POSTGRESQL_CLUSTER_SUPERUSER)
          password: $.cndi.secrets.seal(POSTGRESQL_PASSWORD)
      cnpg-database-user-auth-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: cnpg-database-user-auth-secret
          namespace: airflow
        type: kubernetes.io/basic-auth
        stringData:
          username: $.cndi.secrets.seal(POSTGRESQL_USER)
          password: $.cndi.secrets.seal(POSTGRESQL_PASSWORD)
      argo-ingress:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argocd-server-ingress
          namespace: argocd
          annotations:
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
        spec:
          ingressClassName: private
          rules:
            - host: "{{ $.cndi.prompts.responses.argocdDomainName }}"
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: argocd-server
                        port:
                          name: https
      oauth2-airflow-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: oauth2-airflow-secret
          namespace: airflow
        stringData:
          authorization_url: $.cndi.secrets.seal(AUTHORIZATION_URL)
          access_token_url: $.cndi.secrets.seal(ACCESS_TOKEN_URL)
          arm_tenant_id: $.cndi.secrets.seal(ARM_TENANT_ID)
          arm_client_id: $.cndi.secrets.seal(ARM_CLIENT_ID)
          arm_client_secret: $.cndi.secrets.seal(ARM_CLIENT_SECRET)
          api_base_url: $.cndi.secrets.seal(API_BASE_URL)
    applications:
      cnpg:
        targetRevision: 0.18.0
        destinationNamespace: cnpg-system
        repoURL: "https://cloudnative-pg.github.io/charts"
        chart: cloudnative-pg
      airflow:
        targetRevision: 1.7.0
        destinationNamespace: airflow
        repoURL: "https://airflow.apache.org"
        chart: airflow
        values:
          executor: LocalKubernetesExecutor
          data:
            metadataSecretName: postgresql-connection-string-secret
          postgresql:
            enabled: false
          dags:
            gitSync:
              enabled: true
              repo: "{{ $.cndi.prompts.responses.dagRepoUrl }}"
              credentialsSecret: airflow-git-credentials
              branch: main
              wait: 40
              subPath: dags
          webserver:  
            webserverConfig: |
              import os
              from airflow.configuration import conf
              from airflow.utils.log.logging_mixin import LoggingMixin
              from flask_appbuilder.security.manager import AUTH_OAUTH
              from airflow.www.security import AirflowSecurityManager
              print("configuring webserver!!")
              SQLALCHEMY_DATABASE_URI = conf.get("core", "SQL_ALCHEMY_CONN")
              basedir = os.path.abspath(os.path.dirname(__file__))
              CSRF_ENABLED = True
              AUTH_TYPE = AUTH_OAUTH
              AUTH_USER_REGISTRATION_ROLE = "Admin"
              AUTH_USER_REGISTRATION = True

              class AzureCustomSecurity(AirflowSecurityManager, LoggingMixin):
                  def get_oauth_user_info(self, provider, response=None):
                      if provider == "azure":
                          self.log.debug("Azure response received : {0}".format(response))
                          id_token = response["id_token"]
                          self.log.debug(str(id_token))
                          me = self._azure_jwt_token_parse(id_token)
                          self.log.debug("Parse JWT token : {0}".format(me))
                          print("Parse JWT token : {0}".format(me))
                          parsed_token = {
                              "name": me["name"],
                              "email": me["upn"],
                              "first_name": me["given_name"],
                              "last_name": me["family_name"],
                              "id": me["oid"],
                              "username": me["preferred_username"],
                              "upn": me["oid"]  
                          }
                          return parsed_token
                      else:
                          return {}


              OAUTH_PROVIDERS = [
                {
                  "name": "azure",
                  "icon": "fa-windows",
                  "token_key": "access_token",
                  "remote_app": {
                      "client_id": os.environ.get("ARM_CLIENT_ID"),
                      "client_secret": os.environ.get("ARM_CLIENT_SECRET"),
                      "api_base_url": f"https://login.microsoftonline.com/{os.environ.get('ARM_TENANT_ID')}/oauth2/v2.0",
                      "client_kwargs": {
                          "scope": "User.Read openid email profile ",
                          "resource": os.environ.get("ARM_CLIENT_ID"),
                          "verify_signature": True
                      },
                      "request_token_url": None,
                      "access_token_url": f"https://login.microsoftonline.com/"
                      f"{os.environ.get('ARM_TENANT_ID')}/"
                      "oauth2/v2.0/token",
                      "authorize_url": f"https://login.microsoftonline.com/"
                      f"{os.environ.get('ARM_TENANT_ID')}/"
                      f"oauth2/v2.0/authorize",
                  } 
                }
              ]

              # a mapping from the values of `userinfo["role_keys"]` to a list of FAB roles
              AUTH_ROLES_MAPPING = {
                "airflow_admin": ["Admin"]
              }

              AUTH_ROLES_SYNC_AT_LOGIN = True
              SECURITY_MANAGER_CLASS = AzureCustomSecurity            
          config:
            webserver:
              expose_config: "True"
              instance_name: Polyseam
              enable_proxy_fix: "True"
              base_url: "https://{{ $.cndi.prompts.responses.airflowDomainName }}"
            operators:
              default_owner: Polyseam
          secret: 
            - envName: ARM_TENANT_ID
              secretKey: arm_tenant_id
              secretName: oauth2-airflow-secret
            - envName: ARM_CLIENT_ID
              secretKey: arm_client_id
              secretName: oauth2-airflow-secret
            - envName: ARM_CLIENT_SECRET
              secretKey: arm_client_secret
              secretName: oauth2-airflow-secret 
            - envName: AUTHORIZATION_URL
              secretKey: authorization_url
              secretName: oauth2-airflow-secret   
            - envName: ACCESS_TOKEN_URL
              secretKey: access_token_url
              secretName: oauth2-airflow-secret
            - envName: API_BASE_URL
              secretKey: api_base_url
              secretName: oauth2-airflow-secret
          ingress:
            web:
              enabled: true
              ingressClassName: private
              annotations:
                nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
          logs:
            persistence:
              enabled: true
              size: 10Gi
              storageClassName: azurefile-csi
          createUserJob:
            useHelmHooks: false
          migrateDatabaseJob:
            useHelmHooks: false
  env:
    extend_basic_env: azure
    entries:
      - type: Comment
        comment: PostgreSQL connection parameters
      - name: POSTGRESQL_DB
        value: "{{ $.cndi.prompts.responses.postgresqlDb }}"
      - name: POSTGRESQL_USER
        value: "{{ $.cndi.prompts.responses.postgresqlUser }}"
      - name: POSTGRESQL_PASSWORD
        value: "{{ $.cndi.prompts.responses.postgresqlPassword }}"
      - name: POSTGRESQL_PROTOCOL
        value: postgresql
      - name: POSTGRESQL_HOST
        value: cnpg-airflow-cluster-rw
      - name: POSTGRESQL_PORT
        value: "5432"
      - name: POSTGRESQL_CONNECTION_STRING
        value: >-
          postgresql://{{ $.cndi.prompts.responses.postgresqlUser }}:{{
          $.cndi.prompts.responses.postgresqlPassword
          }}@cnpg-airflow-cluster-rw:5432/{{
          $.cndi.prompts.responses.postgresqlDb }}
      - name: POSTGRESQL_CLUSTER_SUPERUSER
        value: postgres
      - type: Comment
        comment: airflow-git-credentials secret values for DAG Storage
      - name: GIT_SYNC_USERNAME
        value: "{{ $.cndi.prompts.responses.gitSyncUsername }}"
      - name: GIT_SYNC_PASSWORD
        value: "{{ $.cndi.prompts.responses.gitSyncPassword }}"  
      - name: ACCESS_TOKEN_URL
        value: https://login.microsoftonline.com/<ARM_TENANT_ID>/oauth2/v2.0/token
      - name: AUTHORIZATION_URL
        value: https://login.microsoftonline.com/<ARM_TENANT_ID>/oauth2/v2.0/authorize
      - name: API_BASE_URL
        value: https://login.microsoftonline.com/<ARM_TENANT_ID>/oauth2
  readme:
    extend_basic_readme: azure
    template_section: >-
      ## airflow


      This template deploys a fully functional
      [Airflow](https://airflow.apache.org) cluster using the [official Airflow
      Helm chart](https://github.com/apache/airflow/tree/main/chart) and an
      external production ready posgresql database
      [cloudnative-pg](https://github.com/cloudnative-pg/charts) 


      The default credentials for Airflow are: 


      username: `admin`

      password: `admin`
