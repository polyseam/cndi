prompts:
  - name: argocdDomainName
    default: argocd.example.com
    message: "Please enter the domain name you want argocd to be accessible on:"
    type: Input
  - name: mssqlDomainName
    default: mssql.example.com
    message: "Please enter the domain name you want mssql to be accessible on:"
    type: Input
  - message: "Please enter the email address you want to use for lets encrypt:"
    default: admin@example.com
    name: letsEncryptClusterIssuerEmailAddress
    type: Input
  - message: "Please enter mssql root password "
    default: Password123
    name: rootPassword
    type: Secret
outputs:
  cndi-config:
    cndi_version: v1
    infrastructure:
      cndi:
        cert_manager:
          email: "{{ $.cndi.prompts.responses.letsEncryptClusterIssuerEmailAddress }}"
        open_ports:
          - number: 1433
            name: mssql
            namespace: mssql
            service: mssql-0
        nodes:
          - name: mssql-nodes
            kind: aks
            instance_type: Standard_D2s_v3
            volume_size: 128
            agents_min_count: 1
            agents_max_count: 3
    cluster_manifests:
      mssql:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: mssql
      mssql-service:
        apiVersion: v1
        kind: Service
        metadata:
          name: mssql-0
          namespace: mssql
        spec:
          selector:
            statefulset.kubernetes.io/pod-name: mssql-0
          ports:
            - protocol: TCP
              port: 1433
              targetPort: 1433
      mssql-configmap:
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: mssql
          namespace: mssql
        data:
          mssql.conf: |
            [EULA]
            accepteula = Y
            accepteulaml = Y

            [coredump]
            captureminiandfull = true
            coredumptype = full

            [hadr]
            hadrenabled = 1

            [language]
            lcid = 1033

            [network]
            tlscert = /var/opt/mssql/sslcert/tls.crt
            tlskey = /var/opt/mssql/sslcert/tls.key
            tlsprotocols = 1.2
            forceencryption = 0

            [filelocation]
            defaultbackupdir = /var/opt/mssql/backup
            defaultdatadir = /var/opt/mssql/userdata
            defaultdumpdir = /var/opt/mssql/dump
            defaultlogdir = /var/opt/mssql/userlog

      mssql-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: mssql-secret
          namespace: mssql
          labels:
            argocd.argoproj.io/secret-type: cluster
        type: Opaque
        stringData:
          MSSQL_SA_PASSWORD: $.cndi.secrets.seal(MSSQL_SA_PASSWORD)
      selfsigned-issuer:
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: selfsigned-issuer
        spec:
          selfSigned: {}
      mssql-certs:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: mssql-certs
          namespace: mssql
        spec:
          secretName: mssql-certs-secret
          duration: 2160h # 90d
          renewBefore: 360h # 15d
          issuerRef:
            name: selfsigned-issuer
            kind: ClusterIssuer
          commonName: "{{ $.cndi.prompts.responses.mssqlDomainName }}"
          dnsNames:
            - "{{ $.cndi.prompts.responses.mssqlDomainName }}"
            - "mssql-0.mssql.svc.cluster.local"
          privateKey:
            algorithm: RSA
            encoding: PKCS1
            size: 2048
      mssql-statefulset:
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: mssql
          namespace: mssql
          labels:
            app: mssql
        spec:
          serviceName: mssql
          replicas: 1
          selector:
            matchLabels:
              app: mssql
          template:
            metadata:
              labels:
                app: mssql
            spec:
              securityContext:
                fsGroup: 10001
              containers:
                - name: mssql
                  command:
                    - /bin/bash
                    - -c
                  image: "mcr.microsoft.com/mssql/server:2019-latest"
                  args:
                    - |
                      mkdir -p /var/opt/mssql/sslcert &&
                      chown mssql /var/opt/mssql/sslcert &&
                      chmod 700 /var/opt/mssql/sslcert &&
                      cp /mnt/mssql-certs/tls.crt /var/opt/mssql/sslcert/tls.crt &&
                      cp /mnt/mssql-certs/tls.key /var/opt/mssql/sslcert/tls.key &&
                      chown mssql /var/opt/mssql/sslcert/tls.crt /var/opt/mssql/sslcert/tls.key &&
                      chmod 600 /var/opt/mssql/sslcert/tls.crt /var/opt/mssql/sslcert/tls.key &&
                      cp /var/opt/config/mssql.conf /var/opt/mssql/mssql.conf &&
                      /opt/mssql/bin/sqlservr
                  ports:
                    - containerPort: 1433
                      name: tcpsql
                  env:
                    - name: MSSQL_PID
                      value: Developer
                    - name: ACCEPT_EULA
                      value: "Y"
                    - name: MSSQL_AGENT_ENABLED
                      value: "1"
                    - name: MSSQL_SA_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: mssql-secret
                          key: MSSQL_SA_PASSWORD
                  volumeMounts:
                    - name: mssql-certs-volume
                      mountPath: /mnt/mssql-certs
                    - name: newmssql
                      mountPath: "/var/opt/mssql"
                    - name: userlog
                      mountPath: "/var/opt/mssql/userlog"
                    - name: userdata
                      mountPath: "/var/opt/mssql/userdata"
                    - name: tempdb
                      mountPath: "/var/opt/mssql/tempdb"
                    - name: backup
                      mountPath: "/var/opt/mssql/backup"
                    - name: mssql-config-volume
                      mountPath: /var/opt/config
              volumes:
                - name: mssql-certs-volume
                  secret:
                    secretName: mssql-certs-secret
                - name: mssql-config-volume
                  configMap:
                    name: mssql
          volumeClaimTemplates:
            - metadata:
                name: newmssql
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: userdata
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: userlog
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: tempdb
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: backup
                annotations:
                  volume.beta.kubernetes.io/storage-class: default
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi
      argo-ingress:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argocd-server-ingress
          namespace: argocd
          annotations:
            cert-manager.io/cluster-issuer: cluster-issuer
            kubernetes.io/tls-acme: "true"
            nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        spec:
          ingressClassName: public
          tls:
            - hosts:
                - "{{ $.cndi.prompts.responses.argocdDomainName }}"
              secretName: cluster-issuer-private-key
          rules:
            - host: "{{ $.cndi.prompts.responses.argocdDomainName }}"
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: argocd-server
                        port:
                          name: https
      mssql-ingress:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: mssql-0-ingress
          namespace: mssql
        spec:
          ingressClassName: private
          rules:
            - host: "{{ $.cndi.prompts.responses.mssqlDomainName }}"
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: mssql-0
                        port:
                          number: 1433
    applications:
  env:
    extend_basic_env: azure
    entries:
      - name: MSSQL_SA_PASSWORD
        value: "{{ $.cndi.prompts.responses.rootPassword }}"
  readme:
    extend_basic_readme: azure
    template_section: |-
      ## mssql

       This template deploys a Mssql cluster with one server instance.
