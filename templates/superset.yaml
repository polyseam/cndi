prompts:
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-prompts.yaml):
      {}
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core-prompts.yaml):
      {}

  - name: deploy_argocd_ingress
    default: true
    message: >-
      Do you want to install ArgoCD and expose it via an ingress?
    type: Confirm

  - name: argocd_hostname
    default: argocd.example.com
    message: 'Please enter the domain name you want argocd to be accessible on:'
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
      - ==
      - true
  - name: deploy_superset_ingress
    default: true
    message: >-
      Do you want to expose Superset to the web?
    type: Confirm

  - name: superset_hostname
    default: superset.example.com
    message: Please enter the domain name you want superset to be accessible on
    type: Input
    validators:
      - hostname # FQDN
      - min_length: 3
    condition:
      - "{{ $cndi.get_prompt_response(deploy_superset_ingress) }}"
      - ==
      - true

  - name: superset_namespace
    default: mysuperset
    message: Please enter your destination namespace for your superset cluster
    type: Input

  - name: postgresql_superuser_password
    default: superset
    message: Please enter the password for postgresql default admin user 
    type: Secret

  - name: database_user
    default: superset
    message: Please enter the name for the postgresql database user
    type: Input

  - name: database_user_password
    default: superset
    message: Please enter the password for postgresql database user
    type: Secret

  - name: postgresql_db
    default: superset
    message: Please enter the name for the postgresql database you want to use
    type: Input

  - name: postgresql_cluster_name
    default: cnpg-cluster
    message: Please enter the name for your postgresql cluster
    type: Input

  - name: redis_service_name
    default: redis-replication
    message: Please enter service name for redis replication (default recommended)
    type: Input

  - name: default_user_password
    default: superset
    message: Please enter the password for redis default user
    type: Secret

  - name: sentinel_service_name
    default: redis-sentinel
    message: Please enter service name for redis sentinel (default recommended)
    type: Input

  - name: superset_admin_email
    default: admin@example.com
    message: Please enter email address you want to use for superset admin user
    type: Input

  - name: lets_encrypt_email
    default: admin@example.com
    message: Please enter the email address you want to use for lets encrypt
    type: Input
outputs:
  cndi_config:
    cndi_version: v2
    project_name: "{{ $cndi.get_prompt_response(project_name) }}"
    provider: "{{ $cndi.get_prompt_response(deployment_target_provider) }}"
    distribution: "{{ $cndi.get_prompt_response(deployment_target_distribution) }}"
    infrastructure:
      cndi:
        cert_manager:
          email: "{{ $cndi.get_prompt_response(cert_manager_email) }}"
          
        external_dns: 
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/config/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
            condition:
              - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
              - ==
              - true
        ingress:
          nginx:
            public: 
              enabled: true
              values:
                tcp: 
                  8088: "{{ $cndi.get_prompt_response(superset_namespace) }}/apache-superset:8088"         
        nodes:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/basic-node-pool.yaml):
            {}

    cluster_manifests:
      superset-namespace:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ $cndi.get_prompt_response(superset_namespace) }}"

      argo-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/default-ingress.yaml):
          args:
            ingress_name: argocd-ingress
            ingress_class_name: public
            hostname: "{{ $cndi.get_prompt_response(argocd_hostname) }}"
            service_name: argocd-server
            service_port: 443
            namespace: argocd
          condition:
            - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
            - ==
            - true

      superset-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/default-ingress.yaml):
          args:
            ingress_name: superset-ingress
            ingress_class_name: public
            hostname: "{{ $cndi.get_prompt_response(superset_hostname) }}"
            service_name: apache-superset
            service_port: 8088
            namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
          condition:
            - "{{ $cndi.get_prompt_response(deploy_superset_ingress) }}"
            - ==
            - true

      cnpg-cluster:
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: "{{ $cndi.get_prompt_response(postgresql_cluster_name) }}"
          namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          imageName: 'ghcr.io/cloudnative-pg/postgresql:16'
          instances: 3
          storage:
            size: 1Gi
          replicationSlots:
            highAvailability:
              enabled: true
          bootstrap:
            initdb:
              database: "{{ $cndi.get_prompt_response(postgresql_db) }}"
              owner: "{{ $cndi.get_prompt_response(database_user) }}"
              secret:
                name: cnpg-database-user-auth-secret
          superuserSecret:
            name: cnpg-cluster-superuser-auth-secret

      cnpg-cluster-superuser-auth-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: cnpg-cluster-superuser-auth-secret
          namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
        type: kubernetes.io/basic-auth
        stringData:
          username: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_SUPERUSER)
          password: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_SUPERUSER_PASSWORD)

      cnpg-database-user-auth-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: cnpg-database-user-auth-secret
          namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
        type: kubernetes.io/basic-auth
        stringData:
          username: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_USER)
          password: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_USER_PASSWORD)

      redis-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: redis-secret
          namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
        type: Opaque
        stringData:
          password: $cndi_on_ow.seal_secret_from_env_var(REDISPASSWORD)

      redis-replication:
        apiVersion: redis.redis.opstreelabs.in/v1beta1
        kind: RedisReplication
        metadata:
          name: "{{ $cndi.get_prompt_response(redis_service_name) }}"
          namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          clusterSize: 3
          podSecurityContext:
            runAsUser: 1000
            fsGroup: 1000
          kubernetesConfig:
            image: quay.io/opstree/redis:v7.0.12
            imagePullPolicy: IfNotPresent
            redisSecret:
              name: redis-secret
              key: password
            resources:
              requests:
                cpu: 201m
                memory: 228Mi
              limits:
                cpu: 201m
                memory: 228Mi
          storage:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 1Gi

      redis-sentinel:
        apiVersion: redis.redis.opstreelabs.in/v1beta1
        kind: RedisSentinel
        metadata:
          name: "{{ $cndi.get_prompt_response(sentinel_service_name) }}"
          namespace:  "{{ $cndi.get_prompt_response(superset_namespace) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          clusterSize: 3
          podSecurityContext:
            runAsUser: 1000
            fsGroup: 1000
          redisSentinelConfig: 
            redisReplicationName : "{{ $cndi.get_prompt_response(redis_service_name) }}"
            redisPort: "6379"
          kubernetesConfig:
            image: quay.io/opstree/redis-sentinel:v7.0.7
            imagePullPolicy: IfNotPresent
            redisSecret:
              name: redis-secret
              key: password
            resources:
              requests:
                cpu: 101m
                memory: 228Mi
              limits:
                cpu: 101m
                memory: 228Mi

      superset-secrets:
        apiVersion: v1
        kind: Secret
        metadata:
          name: superset-secrets-env
          namespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
          labels:
            app: apache-superset
        type: Opaque
        stringData:
          REDIS_HOST: $cndi_on_ow.seal_secret_from_env_var(REDIS_HOST)
          REDIS_PASSWORD: $cndi_on_ow.seal_secret_from_env_var(REDISPASSWORD)
          REDIS_PORT: $cndi_on_ow.seal_secret_from_env_var(REDIS_PORT)
          DB_HOST: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_HOST)
          DB_PORT: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_PORT)
          DB_USER: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_SUPERUSER)
          DB_PASS: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_SUPERUSER_PASSWORD)
          DB_NAME: $cndi_on_ow.seal_secret_from_env_var(POSTGRESQL_DATABASE)

      external-dns-secret: 
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/secret/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
            - ==
            - true

    applications: 
      cnpg:
        targetRevision: 0.18.0
        destinationNamespace: cnpg-system
        repoURL: 'https://cloudnative-pg.github.io/charts'
        chart: cloudnative-pg
      redis-opr:
        repoURL: https://ot-container-kit.github.io/helm-charts
        chart: redis-operator
        targetRevision: 0.15.3
        destinationNamespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
      apache-superset: 
        repoURL: https://apache.github.io/superset
        targetRevision: 0.10.6
        chart: superset
        destinationNamespace: "{{ $cndi.get_prompt_response(superset_namespace) }}"
        values:
          envFromSecret: superset-secrets-env
          supersetNode:
            replicaCount: 1
            connections:
              redis_password: dummy
          supersetWorker:
            replicaCount: 1
          init:
            adminUser:
              email: "{{ $cndi.get_prompt_response(superset_admin_email) }}"
          postgresql: 
            enabled: false
          redis:
            enabled: false

  env:
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/git-credentials-{{ $cndi.get_prompt_response(git_credentials_mode) }}-env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/env.yaml):
      {}

        
    $cndi.comment(superset-heading): Superset Connection Parameters
    REDIS_HOST: "{{ $cndi.get_prompt_response(redis_service_name) }}-0.{{ $cndi.get_prompt_response(redis_service_name) }}-headless.{{ $cndi.get_prompt_response(superset_namespace) }}.svc.cluster.local"
    REDISPASSWORD: "{{ $cndi.get_prompt_response(default_user_password) }}"
    REDIS_PORT: "6379"
    POSTGRESQL_HOST: "{{ $cndi.get_prompt_response(postgresql_cluster_name) }}-ew"
    POSTGRESQL_PORT: "5432"
    POSTGRESQL_SUPERUSER: postgres
    POSTGRESQL_SUPERUSER_PASSWORD: "{{ $cndi.get_prompt_response(postgresql_superuser_password) }}"
    POSTGRESQL_DATABASE: "{{ $cndi.get_prompt_response(postgresql_db) }}"
    POSTGRESQL_USER: "{{ $cndi.get_prompt_response(database_user) }}"
    POSTGRESQL_USER_PASSWORD: "{{ $cndi.get_prompt_response(database_user_password) }}"

  readme:
    project_name: "# {{ $cndi.get_prompt_response(project_name) }}"
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-readme.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/{{ $cndi.get_prompt_response(deployment_target_distribution) }}.md):
      {}

    superset: |
      # Apache Superset Deployment Guide

      This Template deploys a standalone production-ready [Apache Superset](https://superset.apache.org) application on a Kubernetes cluster using Helm.
      Apache Superset is an open-source data exploration and visualization platform designed to be intuitive and easy to use. 
      It supports connection to a wide variety of databases and data warehouses, allowing you to visualize your data through rich, interactive dashboards.

      ## Customizing Your Deployment

      Customize your Superset deployment by modifying the values.yaml file. Key configuration options include:

      - **Persistence:** Enable and configure persistent storage for Superset metadata.
      - **Database:** Configure external database connections for better performance and scalability.
      - **Resources:** Set CPU and memory limits and requests for the Superset pods.
      - **Ingress:** Customize Ingress settings for external access.

      For a full list of configurable values, consult the Helm chart's documentation or the [values.yaml](https://github.com/apache/superset/tree/master/helm/superset/values.yaml) file in the chart source.
      
      ## Verifying Superset Accessibility

      After deploying your Superset instance and configuring external access (either via port forwarding, Ingress, or ExternalDNS), it's crucial to ensure that Superset is properly accessible through your chosen domain.

      **Access the Web Interface**:
        - Open a web browser and navigate to the domain you've configured for Superset, e.g., `http://superset.yourdomain.com`.
        - You should be greeted with Superset's login screen.

