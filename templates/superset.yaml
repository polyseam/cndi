blocks:
  - name: deploy_superset_ingress_blk
    content:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: superset-ingress
        namespace: superset
        annotations:
          cert-manager.io/cluster-issuer: cluster-issuer
          kubernetes.io/tls-acme: "true"
          external-dns.alpha.kubernetes.io/hostname: "{{ $cndi.get_prompt_response(superset_hostname) }}"
      spec:
        ingressClassName: public
        tls:
          - hosts:
              - "{{ $cndi.get_prompt_response(superset_hostname) }}"
            secretName: cluster-issuer-private-key-superset
        rules:
          - host: "{{ $cndi.get_prompt_response(superset_hostname) }}"
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: superset
                      port:
                        number: 8088
prompts:
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-prompts.yaml):
      {}
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core-prompts.yaml):
      {}

  - name: deploy_argocd_ingress
    default: true
    message: >-
      Do you want to expose ArgoCD to the web?
    type: Confirm

  - name: argocd_hostname
    default: argocd.example.com
    message: "What hostname should ArgoCD be accessible at?"
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
      - ==
      - true

  - name: deploy_superset_ingress
    default: true
    message: >-
      Do you want to expose the Superset UI to the web?
    type: Confirm

  - name: superset_hostname
    default: superset.example.com
    message: What hostname should Superset UI be accessible at?
    type: Input
    validators:
      - hostname # FQDN
      - min_length: 3
    condition:
      - "{{ $cndi.get_prompt_response(deploy_superset_ingress) }}"
      - ==
      - true

outputs:
  cndi_config:
    cndi_version: v2
    project_name: "{{ $cndi.get_prompt_response(project_name) }}"
    provider: "{{ $cndi.get_prompt_response(deployment_target_provider) }}"
    distribution: "{{ $cndi.get_prompt_response(deployment_target_distribution) }}"
    infrastructure:
      cndi:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/observability-config.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(deploy_grafana_ingress) }}"
            - ==
            - true

        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/argocd-config.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
            - ==
            - true

        cert_manager:
          email: "{{ $cndi.get_prompt_response(cert_manager_email) }}"

        external_dns:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/config/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
            condition:
              - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
              - ==
              - true

        nodes:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/basic-node-pool.yaml):
            {}

        open_ports:
          - name: superset
            namespace: superset
            service: superset
            number: 8088
    cluster_manifests:
      superset-namespace:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: superset

      superset-ingress:
        $cndi.get_block(deploy_superset_ingress_blk):
          condition:
            - "{{ $cndi.get_prompt_response(deploy_superset_ingress) }}"
            - ==
            - true

      superset-cnpg-cluster:
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: superset-cnpg-cluster
          namespace: superset
          annotations:
            $cndi.comment(why_propagation_policy): PrunePropagationPolicy=background should prevent PDBs from blocking cluster destruction
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true,PrunePropagationPolicy=background
        spec:
          imageName: "ghcr.io/cloudnative-pg/postgresql:16"
          instances: 3
          storage:
            size: 1Gi
          replicationSlots:
            highAvailability:
              enabled: true
          postgresql:
            pg_hba:
              - host superset-db superset all password
          bootstrap:
            initdb:
              database: superset-db
              owner: superset
              secret:
                name: superset-cnpg-database-user-auth-secret
          superuserSecret:
            name: superset-cnpg-cluster-superuser-auth-secret

      superset-cnpg-cluster-superuser-auth-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: superset-cnpg-cluster-superuser-auth-secret
          namespace: superset
        type: kubernetes.io/basic-auth
        stringData:
          username: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_CLUSTER_SUPERUSER)
          password: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_CLUSTER_SUPERUSER_PASSWORD)

      superset-cnpg-database-user-auth-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: superset-cnpg-database-user-auth-secret
          namespace: superset
        type: kubernetes.io/basic-auth
        stringData:
          username: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_USER)
          password: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_USER_PASSWORD)

      superset-env-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: superset-env
          namespace: superset
        type: Opaque
        stringData:
          SUPERSET_SECRET_KEY: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_SECRET_KEY)
          REDIS_USER: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_REDIS_USER)
          REDIS_HOST: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_REDIS_HOST)
          REDIS_DB: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_REDIS_DB)
          REDIS_PORT: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_REDIS_PORT)
          REDIS_CELERY_DB: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_REDIS_CELERY_DB)
          REDIS_PROTO: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_REDIS_PROTO)
          DB_HOST: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_HOST)
          DB_PORT: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_PORT)
          DB_USER: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_USER)
          DB_PASS: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_USER_PASSWORD)
          DB_NAME: $cndi_on_ow.seal_secret_from_env_var(SUPERSET_POSTGRESQL_DB)

      external-dns-secret:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/external-dns/secret/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
            - ==
            - true

    applications:
      cnpg:
        targetRevision: 0.18.0
        destinationNamespace: cnpg-system
        repoURL: "https://cloudnative-pg.github.io/charts"
        chart: cloudnative-pg
      superset:
        repoURL: https://apache.github.io/superset
        targetRevision: 0.12.11
        chart: superset
        destinationNamespace: superset
        values:
          secretEnv:
            create: false
          redis:
            master:
              persistence:
                enabled: true
          postgresql:
            enabled: false
  env:
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/git-credentials-{{ $cndi.get_prompt_response(git_credentials_mode) }}-env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/env.yaml):
      {}
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/env.yaml):
      {}

    $cndi.comment(superset-heading): Superset Redis Connection Parameters
    SUPERSET_SECRET_KEY: "{{ $cndi.get_random_string(24) }}"
    SUPERSET_REDIS_USER: redis
    SUPERSET_REDIS_DB: redis-db
    SUPERSET_REDIS_HOST: superset-redis-headless
    SUPERSET_REDIS_PORT: 6379
    SUPERSET_REDIS_CELERY_DB: 0
    SUPERSET_REDIS_PROTO: redis

    $cndi.comment(postgres-heading): Superset PostgreSQL Connection Parameters
    SUPERSET_POSTGRESQL_HOST: "superset-cnpg-cluster-rw"
    SUPERSET_POSTGRESQL_PORT: "5432"
    SUPERSET_POSTGRESQL_CLUSTER_SUPERUSER: postgres
    SUPERSET_POSTGRESQL_CLUSTER_SUPERUSER_PASSWORD: "{{ $cndi.get_random_string(24) }}"
    SUPERSET_POSTGRESQL_DB: superset-db
    SUPERSET_POSTGRESQL_USER: superset
    SUPERSET_POSTGRESQL_USER_PASSWORD: "{{ $cndi.get_random_string(16) }}"

  readme:
    project_name: "# {{ $cndi.get_prompt_response(project_name) }}"
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/common/cluster/core-readme.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/core.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/cndi/main/blocks/{{ $cndi.get_prompt_response(deployment_target_provider) }}/{{ $cndi.get_prompt_response(deployment_target_distribution) }}.md):
      {}

    superset: |
      # Apache Superset Deployment Guide

      This Template deploys a standalone production-ready [Apache Superset](https://superset.apache.org) application on a Kubernetes cluster using Helm.
      Apache Superset is an open-source data exploration and visualization platform designed to be intuitive and easy to use.
      It supports connection to a wide variety of databases and data warehouses, allowing you to visualize your data through rich, interactive dashboards.

      ## Customizing Your Deployment

      Customize your Superset deployment by modifying the values.yaml file. Key configuration options include:

      - **Persistence:** Enable and configure persistent storage for Superset metadata.
      - **Database:** Configure external database connections for better performance and scalability.
      - **Resources:** Set CPU and memory limits and requests for the Superset pods.
      - **Ingress:** Customize Ingress settings for external access.

      For a full list of configurable values, consult the Helm chart's documentation or the [values.yaml](https://github.com/apache/superset/tree/master/helm/superset/values.yaml) file in the chart source.

      ## Verifying Superset Accessibility

      After deploying your Superset instance and configuring external access (either via port forwarding, Ingress, or ExternalDNS), it's crucial to ensure that Superset is properly accessible through your chosen domain.

      **Access the Web Interface**:
        - Open a web browser and navigate to the domain you've configured for Superset, e.g., `http://superset.yourdomain.com`.
        - You should be greeted with Superset's login screen.
