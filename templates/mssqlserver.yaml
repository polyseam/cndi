prompts:
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/core-prompts.yaml):
      {}
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/setup-prompts.yaml):
      {}

  - name: deploy_argocd_ingress
    default: true
    message: >-
      Do you want to install ArgoCD and expose it via an ingress?
    type: Confirm

  - name: argocd_hostname
    default: argocd.example.com
    message: >-
      What hostname should ArgoCD be accessible at?
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
      - ==
      - true

  - name: mssql_sa_password
    default: S@password1234
    message: >-
      What will be your default password for your 'mssql sa' user?
    type: Secret

  - name: deploy_mssql_ingress
    default: true
    message: >-
      Do you want to expose Mssql to the web?
    type: Confirm

  - name: mssql_hostname
    default: mymssql.example.com
    message: >-
      What hostname should Mssql be accessible at?
    type: Input
    validators:
      - hostname # FQDN
      - min_length: 3
    condition:
      - "{{ $cndi.get_prompt_response(deploy_mssql_ingress) }}"
      - ==
      - true

outputs:
  cndi_config:
    project_name: "{{ $cndi.get_prompt_response(project_name) }}"
    cndi_version: v2
    provider: "{{ $cndi.get_prompt_response(deployment_target_provider) }}"
    distribution: "{{ $cndi.get_prompt_response(deployment_target_distribution) }}"
    # this is a template comment
    infrastructure:
      cndi:
        cert_manager:
          email: "{{ $cndi.get_prompt_response(cert_manager_email) }}"
        nodes:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/mssql/nodes/{{ $cndi.get_prompt_response(deployment_target_provider) }}.yaml): {}

    cluster_manifests:
      $cndi.comment(mssql-sa-secret): Mssql sa password
      mssql-sa-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: mssql-sa-secret
          namespace: mssql
        type: Opaque
        stringData:
          MSSQL_SA_PASSWORD: $cndi_on_ow.seal_secret_from_env_var(MSSQL_SA_PASSWORD)
1
      argo-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/default-ingress.yaml):
          args:
            ingress_name: argocd-ingress
            hostname: "{{ $cndi.get_prompt_response(argocd_hostname) }}"
            service_name: argocd-server
            service_port: 443
            namespace: argocd

          condition:
            - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
            - ==
            - true

      mssql-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/default-ingress.yaml):
          args:
            ingress_name: mssql-ingress
            hostname: "{{ $cndi.get_prompt_response(mssql_hostname) }}"
            service_name: sqlinst1-0
            service_port: 1433
            namespace: mssql

          condition:
            - "{{ $cndi.get_prompt_response(deploy_mssql_ingress) }}"
            - ==
            - true
      mssql:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: mssql

      mssql-service:
        apiVersion: v1
        kind: Service
        metadata:
          name: mssql-0
          namespace: mssql
        spec:
          selector:
            statefulset.kubernetes.io/pod-name: mssql-0
          ports:
            - protocol: TCP
              port: 1433
              targetPort: 1433

      selfsigned-issuer:
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: selfsigned-issuer
        spec:
          selfSigned: {}

      mssql-certs:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: mssql-certs
          namespace: mssql
        spec:
          secretName: mssql-certs-secret
          duration: 2160h
          renewBefore: 360h
          issuerRef:
            name: selfsigned-issuer
            kind: ClusterIssuer
          commonName: "{{ $cndi.get_prompt_response(mssql_hostname) }}"
          dnsNames:
            - "{{ $cndi.get_prompt_response(mssql_hostname) }}"
            - mssql-0.mssql.svc.cluster.local
          privateKey:
            algorithm: RSA
            encoding: PKCS1
            size: 2048

      mssql-configmap:
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: mssql
          namespace: mssql
        data:
          mssql.conf: |
            [EULA]
            accepteula = Y
            accepteulaml = Y

            [coredump]
            captureminiandfull = true
            coredumptype = full

            [hadr]
            hadrenabled = 1

            [language]
            lcid = 1033

            [network]
            tlscert = /var/opt/mssql/sslcert/tls.crt
            tlskey = /var/opt/mssql/sslcert/tls.key
            tlsprotocols = 1.2
            forceencryption = 0

      mssql-statefulset:
        apiVersion: apps/v1
        kind: StatefulSet
        metadata:
          name: mssql
          namespace: mssql
          labels:
            app: mssql
        spec:
          serviceName: mssql
          replicas: 1
          selector:
            matchLabels:
              app: mssql
          template:
            metadata:
              labels:
                app: mssql
            spec:
              securityContext:
                fsGroup: 10001
              containers:
                - name: mssql
                  command:
                    - /bin/bash
                    - -c
                  image: "mcr.microsoft.com/mssql/server:2019-latest"
                  args:
                    - |
                      mkdir -p /var/opt/mssql/sslcert &&
                      chown mssql /var/opt/mssql/sslcert &&
                      chmod 700 /var/opt/mssql/sslcert &&
                      cp /mnt/mssql-certs/tls.crt /var/opt/mssql/sslcert/tls.crt &&
                      cp /mnt/mssql-certs/tls.key /var/opt/mssql/sslcert/tls.key &&
                      chown mssql /var/opt/mssql/sslcert/tls.crt /var/opt/mssql/sslcert/tls.key &&
                      chmod 600 /var/opt/mssql/sslcert/tls.crt /var/opt/mssql/sslcert/tls.key &&
                      cp /var/opt/config/mssql.conf /var/opt/mssql/mssql.conf &&
                      /opt/mssql/bin/sqlservr
                  env:
                    - name: MSSQL_PID
                      value: Developer
                    - name: ACCEPT_EULA
                      value: "Y"
                    - name: MSSQL_AGENT_ENABLED
                      value: "1"
                    - name: MSSQL_SA_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: mssql-secret
                          key: MSSQL_SA_PASSWORD
                  volumeMounts:
                    - name: mssql-certs-volume
                      mountPath: /mnt/mssql-certs
                    - name: newmssql
                      mountPath: "/var/opt/mssql"
                    - name: userdata
                      mountPath: "/var/opt/mssql/userdata"
                    - name: userlog
                      mountPath: "/var/opt/mssql/userlog"
                    - name: tempdb
                      mountPath: "/var/opt/mssql/tempdb"
                    - name: mssql-config-volume
                      mountPath: /var/opt/config
              volumes:
                - name: mssql-certs-volume
                  secret:
                    secretName: mssql-certs-secret
                - name: mssql-config-volume
                  configMap:
                    name: mssql
          volumeClaimTemplates:
            - metadata:
                name: newmssql
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: userdata
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: userlog
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
            - metadata:
                name: tempdb
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 8Gi
    applications: null

  env:
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/git-credentials-{{ $cndi.get_prompt_response(git_credentials_mode) }}-env.yaml): {}

    $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/env.yaml): {}

    $cndi.comment(mssql-sa-password-comment): "Should contain uppercase, lowercase, number, special character and muste be greater than 8 letters"
    MSSQL_SA_PASSWORD: "{{ $cndi.get_prompt_response(mssql_sa_password) }}"

  readme:
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/readme-section.md): {}
