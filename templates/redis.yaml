blocks:
  - name: redis-ingress
    content:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: redis-server-ingress
          namespace: "{{ $cndi.get_arg(namespace) }}"
          annotations:
            cert-manager.io/cluster-issuer: cluster-issuer
            kubernetes.io/tls-acme: 'true'
            nginx.ingress.kubernetes.io/ssl-passthrough: 'true'
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        spec:
          ingressClassName: public
          tls:
            - hosts:
                - "{{ $cndi.get_arg(hostname) }}"
              secretName: cluster-issuer-redis-key
          rules:
            - host: "{{ $cndi.get_arg(hostname) }}"
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: redis-replication
                        port:
                          number: 6379
prompts:
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/core-prompts.yaml):
      {}
  - $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/setup-prompts.yaml):
      {}

  - name: deploy_argocd_ingress
    default: true
    message: >-
      Do you want to install ArgoCD and expose it via an ingress?
    type: Confirm

  - name: argocd_hostname
    default: argocd.example.com
    message: >-
      What hostname should ArgoCD be accessible at?
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
      - ==
      - true

  - name: deploy_redis_ingress
    default: true
    message: >-
      Do you want to expose Redis via an ingress?
    type: Confirm

  - name: redis_hostname
    message: 'Please enter the domain name you want Redis to be accessible on:'
    default: redis.example.com
    type: Input
    validators:
      - hostname # FQDN
    condition:
      - "{{ $cndi.get_prompt_response(deploy_redis_ingress) }}"
      - ==
      - true

  - name: default_user_password
    message: 'Please enter Redis default user password '
    default: password
    type: Secret

  - name: default_namespace
    message: 'Please enter the namespace for the cluster'
    default: redis-opr
    type: Input

  - name: cluster_size
    message: 'Please enter the cluster size for Redis Replication'
    default: 3
    type: Number

  - name: common_name
    message: "Please enter the common name for TLS certificate"
    default: polyseam.io
    type: Input

outputs:
  cndi_config:
    cndi_version: v2
    project_name: "{{ $cndi.get_prompt_response(project_name) }}"
    provider: "{{ $cndi.get_prompt_response(deployment_target_provider) }}"
    distribution: "{{ $cndi.get_prompt_response(deployment_target_distribution) }}"
    infrastructure:
      cndi:
        cert_manager:
          email: "{{ $cndi.get_prompt_response(cert_manager_email) }}"

        external_dns: 
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/external-dns/config.yaml):
            condition:
              - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
              - ==
              - true
            args:
              dns_provider: "{{ $cndi.get_prompt_response(dns_provider) }}"

        nodes:
          $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/{{ $cndi.get_prompt_response(deployment_target_distribution) }}/standard-nodes.yaml):
            {}
            
        open_ports:
          - name: redisrep
            number: 6379
            service: redis-replication
            namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"

    cluster_manifests:
      redis-secret:
        apiVersion: v1
        kind: Secret
        metadata:
          name: redis-secret
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
        stringData:
          password: $cndi_on_ow.seal_secret_from_env_var(REDISPASSWORD)
        type: Opaque

      redis-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: selfsigned-issuer
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
        spec:
          selfSigned: {}

      redis-root-certificate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: redis-root-cert
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
        spec:
          isCA: true
          commonName: "{{ $cndi.get_prompt_response(common_name) }}"
          privateKey:
            algorithm: RSA
            encoding: PKCS1
            size: 2048
          dnsNames:
            - "{{ $cndi.get_prompt_response(redis_hostname) }}"
          secretName: myredis-secret
          issuerRef:
            kind: Issuer
            name: selfsigned-issuer

      redis-ca-issuer:
        apiVersion: cert-manager.io/v1
        kind: Issuer
        metadata:
          name: redis-ca-issuer
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
        spec:
          ca:
            secretName: myredis-secret

      redis-signed-cert:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: redis-signed-cert
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          secretName: redis-server-tls
          isCA: false
          commonName: "CName-{{ $cndi.get_prompt_response(common_name) }}"
          usages:
            - server auth
            - client auth
          dnsNames:
            - "{{ $cndi.get_prompt_response(redis_hostname) }}"
          issuerRef:
            name: redis-ca-issuer
            kind: Issuer

      redis-rep:
        apiVersion: redis.redis.opstreelabs.in/v1beta1
        kind: RedisReplication
        metadata:
          name: redis-replication
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          clusterSize: "{{ $cndi.get_prompt_response(cluster_size) }}"
          TLS:
            ca: ca.crt
            cert: tls.crt
            key: tls.key
            secret:
              secretName: redis-server-tls
          podSecurityContext:
            runAsUser: 1000
            fsGroup: 1000
          kubernetesConfig:
            image: quay.io/opstree/redis:v7.0.5
            imagePullPolicy: IfNotPresent
            redisSecret:
              name: redis-secret
              key: password
            resources:
              requests:
                cpu: 101m
                memory: 128Mi
              limits:
                cpu: 101m
                memory: 128Mi
          storage:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 1Gi

      redis-sentinel:
        apiVersion: redis.redis.opstreelabs.in/v1beta1
        kind: RedisSentinel
        metadata:
          name: redis-sentinel
          namespace: "{{ $cndi.get_prompt_response(default_namespace) }}"
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
        spec:
          clusterSize: "{{ $cndi.get_prompt_response(cluster_size) }}"
          podSecurityContext:
            runAsUser: 1000
            fsGroup: 1000
          redisSentinelConfig: 
            redisReplicationName : redis-replication
            redisPort: "6379"
          kubernetesConfig:
            image: quay.io/opstree/redis-sentinel:v7.0.7 
            imagePullPolicy: IfNotPresent
            redisSecret:
              name: redis-secret
              key: password
            resources:
              requests:
                cpu: 101m
                memory: 128Mi
              limits:
                cpu: 101m
                memory: 128Mi
          storage:
            volumeClaimTemplate:
              spec:
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 1Gi

      argo-ingress:
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/default-ingress.yaml):
          args:
            ingress_name: argocd-ingress
            ingress_class_name: public
            hostname: "{{ $cndi.get_prompt_response(argocd_hostname) }}"
            service_name: argocd-server
            service_port: 443
            namespace: argocd
          condition:
            - "{{ $cndi.get_prompt_response(deploy_argocd_ingress) }}"
            - ==
            - true

      redis-ingress:
        $cndi.get_block(redis-ingress):
          args:
            ingress_name: redis-ingress
            hostname: "{{ $cndi.get_prompt_response(redis_hostname) }}"
            namespace: "{{ $cndi.get_prompt_response(default_namespace) }}" 
          condition:
            - "{{ $cndi.get_prompt_response(deploy_redis_ingress) }}"
            - ==
            - true

      external-dns-secret: 
        $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/external-dns/secret/{{ $cndi.get_prompt_response(dns_provider) }}.yaml):
          condition:
            - "{{ $cndi.get_prompt_response(enable_external_dns) }}"
            - ==
            - true

    applications: 
      redis-opr:
        repoURL: https://ot-container-kit.github.io/helm-charts
        chart: redis-operator
        targetRevision: 0.15.0
        destinationNamespace: "{{ $cndi.get_prompt_response(default_namespace) }}" 
  env:
    $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/git-credentials-{{ $cndi.get_prompt_response(git_credentials_mode) }}-env.yaml):
      {}

    $cndi.get_block(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/env.yaml):
      {}
    $cndi.comment(redis-heading): Redis Connection Parameters
    REDISPASSWORD: "{{ $cndi.get_prompt_response(default_user_password) }}" 
  readme:
    project_name: "# {{ $cndi.get_prompt_response(project_name) }}"
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/common-blocks/main/common/core-readme.md):
      {}
    $cndi.get_string(https://raw.githubusercontent.com/polyseam/common-blocks/main/{{ $cndi.get_prompt_response(deployment_target_provider) }}/{{ $cndi.get_prompt_response(deployment_target_distribution) }}/readme-section.md):
      {}
    redis: |
      # Redis Deployment Guide

      This Template deploys a standalone production-ready Redis Operater along with Redis-Replication server with a user defined cluster size using the [ot-container-kit Redis Helm chart](https://github.com/OT-CONTAINER-KIT/redis-operator). 
      It also deploys Redis-Sentinel as a monitoring solution for Redis instances on a Kubernetes cluster using Helm.
      Redis is an open-source, in-memory data structure store, used as a database, cache, and message broker. 
      It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams.
      Redis is known for its high performance, simplicity, and flexibility, making it ideal for a wide range of applications.

      ## Customizing Your Deployment

      Customize your Redis deployment to meet your specific requirements by adjusting the `values.yaml` file in the Helm chart. Key configuration options to consider include:

      - **Persistence:** Enable persistent storage to ensure data durability across pod restarts and deployments.
      - **Replication:** Configure master-slave replication to increase data availability and facilitate failover scenarios.
      - **Resources:** Allocate CPU and memory resources to your Redis pods to ensure optimal performance under your workload.
      - **Authentication:** Set up password authentication to protect access to your Redis instances.

      For a detailed overview of all configurable parameters and their purposes, consult the Helm chart's documentation or the `values.yaml` file.

      ## Verifying Redis Accessibility

      After deploying Redis and setting up external access (either through port forwarding, Ingress, or ExternalDNS), confirm that the database is accessible:

      **Connect to the Database**:
        - Use a Redis client to connect to your instance by specifying the configured domain, e.g., `redis.yourdomain.com`.

      ## Connecting to the Database Step-by-Step

      Follow these steps to connect to your Redis database:

      1. **Install a Redis Client:** If not already installed, download and install a Redis client on your local machine. The `redis-cli` command-line tool is commonly used for direct interaction with Redis.

      2. **Gather Connection Details:** Collect the necessary details such as the fully qualified domain name (FQDN) for your Redis instance (e.g., `redis.yourdomain.com`) and the port (default is `6379`). If authentication is enabled, ensure you have the password.

      3. **Open Your Terminal:** Launch a terminal window on your local machine.

      4. **Construct the Connection Command:** Use the command format `redis-cli -h <hostname> -p <port> -a <password>`, replacing `<hostname>`, `<port>`, and `<password>` with your actual details. If no authentication is required, omit the `-a <password>` part.

      5. **Initiate the Connection:** Enter the command into your terminal and press Enter. If successful, you will be connected to your Redis instance and can start issuing Redis commands.

      6. **Verify the Connection:** Execute a simple Redis command, such as `PING`, to ensure the connection is working. You should receive a response of `PONG` if everything is set up correctly.

      Remember to adjust your connection details and steps according to the specific configuration and security settings of your Redis deployment.
            